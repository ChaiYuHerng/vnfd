tosca_definitions_version: tosca_simple_profile_for_nfv_1_0_0
description: description
node_types:
  tosca.nodes.nfv.VNF3:
    requirements:
    - virtualLink1:
        type: tosca.nodes.nfv.VL
        required: true
metadata:
  template_name: free5GCSetup
topology_template:
  substitution_mappings:
    node_type: tosca.nodes.nfv.VNF3
  node_templates:
    VDU1:
      type: tosca.nodes.nfv.VDU.Tacker
      properties:
        name: free5gc-smf-VNF
        image: stage3-cp
        flavor: free5gc
        availability_zone: nova
        mgmt_driver: noop
        key_name: free5gc
        user_data_format: RAW
        user_data: |
          #!/bin/sh
          cd /home/ubuntu/ 

          echo "export GOPATH for bash shell"
          export HOME=/home/ubuntu
          export GOPATH=$HOME/go
          export GOROOT=/usr/local/go
          export PATH=$PATH:$GOPATH/bin:$GOROOT/bin
          export GO111MODULE=off
          
          cd /home/ubuntu/go/src/free5gc
          echo "configure SMF"
          cat > /home/ubuntu/free5gc/config/smfcfg.conf <<- EOM
          info:
            version: 1.0.0
            description: AMF initial local configuration
          
          configuration:
            smfName: SMF
            sbi:
              scheme: http
              ipv4Addr: 192.168.2.103
              port: 29502
              tls:
                key: free5gc/support/TLS/smf.key
                pem: free5gc/support/TLS/smf.pem
            serviceNameList:
              - nsmf-pdusession
              - nsmf-event-exposure
              - nsmf-oam
            snssai_info:
              - sNssai:
                  sst: 1
                  sd: 010203
                dnnSmfInfoList:
                  - dnn: internet
              - sNssai:
                  sst: 1
                  sd: 112233
                dnnSmfInfoList:
                  - dnn: internet
            pfcp:
              addr: 192.168.2.103
            userplane_information:
              up_nodes:
                gNB1:
                  type: AN
                  an_ip: 192.168.2.158
                UPF:
                  type: UPF
                  node_id:  192.168.2.143
                  up_resource_ip: 192.168.2.143
                
              links:
                - A: gNB1
                  B: UPF
            ue_subnet: 60.60.0.0/16
            nrfUri: http://192.168.2.101:29510
          EOM

          cat > /home/ubuntu/free5gc/src/smf/smf_context/nf_profile.go << 'EOFF'
          package smf_context
          
          import (
          	"fmt"
          	"free5gc/lib/openapi/models"
          	"time"
          )
          
          var NFServices *[]models.NfService
          
          var NfServiceVersion *[]models.NfServiceVersion
          
          var SmfInfo *models.SmfInfo
          
          func SetupNFProfile() {
          	//Set time
          	date := time.Now()
          	dateFormat, _ := time.Parse(time.RFC3339, date.Format(time.RFC3339))
          
          	//set NfServiceVersion
          	NfServiceVersion = &[]models.NfServiceVersion{
          		{
          			ApiVersionInUri: "v1",
          			ApiFullVersion:  fmt.Sprintf("https://%s:%d/nsmf-pdusession/v1", SMF_Self().HTTPAddress, SMF_Self().HTTPPort),
          			Expiry:          &dateFormat,
          		},
          	}
          
          	//set NFServices
          	NFServices = &[]models.NfService{
          		{
          			ServiceInstanceId: SMF_Self().NfInstanceID + "nsmf-pdusession",
          			ServiceName:       models.ServiceName_NSMF_PDUSESSION,
          			Versions:          NfServiceVersion,
          			Scheme:            models.UriScheme_HTTPS,
          			NfServiceStatus:   models.NfServiceStatus_REGISTERED,
          			ApiPrefix:         fmt.Sprintf("%s://%s:%d", SMF_Self().URIScheme, SMF_Self().HTTPAddress, SMF_Self().HTTPPort),
          		},
          	}
          
          	//set smfInfo
          	SmfInfo = &models.SmfInfo{
          		SNssaiSmfInfoList: &[]models.SnssaiSmfInfoItem{
          			{
          				SNssai: &models.Snssai{},
          				DnnSmfInfoList: &[]models.DnnSmfInfoItem{
          					{
          						Dnn: "internet",
          					},
          					{
          						Dnn: "internet2",
          					},
                            {
          						Dnn: "internet3",
          					},
          				},
          			},
          		},
          	}
          }
          
          EOFF
          
          #echo "initialize SMF"
          #go build -o bin/smf -x src/smf/smf.go
          
          #echo "run SMF"
          #sudo ./bin/smf
    CP1:
      type: tosca.nodes.nfv.CP.Tacker
      properties:
        ip_address: 192.168.2.103
        management: true
      requirements:
      - virtualLink:
          node: VL1
      - virtualBinding:
          node: VDU1
    VL1:
      type: tosca.nodes.nfv.VL
      properties:
        network_name: 5GC
        vendor: Tacker
    FIP1:
      type: tosca.nodes.network.FloatingIP
      properties:
        floating_network: public
        floating_ip_address: 172.24.4.103
      requirements:
      - link:
          node: CP1
